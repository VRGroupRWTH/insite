# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from access_node.models.base_model_ import Model
from access_node.models.attribute import Attribute  # noqa: F401,E501
from access_node import util


class Multimeter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, interval: float=None, attribute: Attribute=None, measurement_times: List[float]=None, _from: float=None, to: float=None, neuron_ids: List[float]=None, values: List[List[float]]=None):  # noqa: E501
        """Multimeter - a model defined in Swagger

        :param name: The name of this Multimeter.  # noqa: E501
        :type name: str
        :param interval: The interval of this Multimeter.  # noqa: E501
        :type interval: float
        :param attribute: The attribute of this Multimeter.  # noqa: E501
        :type attribute: Attribute
        :param measurement_times: The measurement_times of this Multimeter.  # noqa: E501
        :type measurement_times: List[float]
        :param _from: The _from of this Multimeter.  # noqa: E501
        :type _from: float
        :param to: The to of this Multimeter.  # noqa: E501
        :type to: float
        :param neuron_ids: The neuron_ids of this Multimeter.  # noqa: E501
        :type neuron_ids: List[float]
        :param values: The values of this Multimeter.  # noqa: E501
        :type values: List[List[float]]
        """
        self.swagger_types = {
            'name': str,
            'interval': float,
            'attribute': Attribute,
            'measurement_times': List[float],
            '_from': float,
            'to': float,
            'neuron_ids': List[float],
            'values': List[List[float]]
        }

        self.attribute_map = {
            'name': 'name',
            'interval': 'interval',
            'attribute': 'attribute',
            'measurement_times': 'measurement_times',
            '_from': 'from',
            'to': 'to',
            'neuron_ids': 'neuron_ids',
            'values': 'values'
        }

        self._name = name
        self._interval = interval
        self._attribute = attribute
        self._measurement_times = measurement_times
        self.__from = _from
        self._to = to
        self._neuron_ids = neuron_ids
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'Multimeter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Multimeter of this Multimeter.  # noqa: E501
        :rtype: Multimeter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Multimeter.


        :return: The name of this Multimeter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Multimeter.


        :param name: The name of this Multimeter.
        :type name: str
        """

        self._name = name

    @property
    def interval(self) -> float:
        """Gets the interval of this Multimeter.


        :return: The interval of this Multimeter.
        :rtype: float
        """
        return self._interval

    @interval.setter
    def interval(self, interval: float):
        """Sets the interval of this Multimeter.


        :param interval: The interval of this Multimeter.
        :type interval: float
        """

        self._interval = interval

    @property
    def attribute(self) -> Attribute:
        """Gets the attribute of this Multimeter.


        :return: The attribute of this Multimeter.
        :rtype: Attribute
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute: Attribute):
        """Sets the attribute of this Multimeter.


        :param attribute: The attribute of this Multimeter.
        :type attribute: Attribute
        """

        self._attribute = attribute

    @property
    def measurement_times(self) -> List[float]:
        """Gets the measurement_times of this Multimeter.


        :return: The measurement_times of this Multimeter.
        :rtype: List[float]
        """
        return self._measurement_times

    @measurement_times.setter
    def measurement_times(self, measurement_times: List[float]):
        """Sets the measurement_times of this Multimeter.


        :param measurement_times: The measurement_times of this Multimeter.
        :type measurement_times: List[float]
        """

        self._measurement_times = measurement_times

    @property
    def _from(self) -> float:
        """Gets the _from of this Multimeter.


        :return: The _from of this Multimeter.
        :rtype: float
        """
        return self.__from

    @_from.setter
    def _from(self, _from: float):
        """Sets the _from of this Multimeter.


        :param _from: The _from of this Multimeter.
        :type _from: float
        """

        self.__from = _from

    @property
    def to(self) -> float:
        """Gets the to of this Multimeter.


        :return: The to of this Multimeter.
        :rtype: float
        """
        return self._to

    @to.setter
    def to(self, to: float):
        """Sets the to of this Multimeter.


        :param to: The to of this Multimeter.
        :type to: float
        """

        self._to = to

    @property
    def neuron_ids(self) -> List[float]:
        """Gets the neuron_ids of this Multimeter.


        :return: The neuron_ids of this Multimeter.
        :rtype: List[float]
        """
        return self._neuron_ids

    @neuron_ids.setter
    def neuron_ids(self, neuron_ids: List[float]):
        """Sets the neuron_ids of this Multimeter.


        :param neuron_ids: The neuron_ids of this Multimeter.
        :type neuron_ids: List[float]
        """

        self._neuron_ids = neuron_ids

    @property
    def values(self) -> List[List[float]]:
        """Gets the values of this Multimeter.


        :return: The values of this Multimeter.
        :rtype: List[List[float]]
        """
        return self._values

    @values.setter
    def values(self, values: List[List[float]]):
        """Sets the values of this Multimeter.


        :param values: The values of this Multimeter.
        :type values: List[List[float]]
        """

        self._values = values
