# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from access_node.models.base_model_ import Model
from access_node.models.attribute import Attribute  # noqa: F401,E501
from access_node import util


class MultimeterInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, interval: float=None, attributes: List[Attribute]=None):  # noqa: E501
        """MultimeterInfo - a model defined in Swagger

        :param name: The name of this MultimeterInfo.  # noqa: E501
        :type name: str
        :param interval: The interval of this MultimeterInfo.  # noqa: E501
        :type interval: float
        :param attributes: The attributes of this MultimeterInfo.  # noqa: E501
        :type attributes: List[Attribute]
        """
        self.swagger_types = {
            'name': str,
            'interval': float,
            'attributes': List[Attribute]
        }

        self.attribute_map = {
            'name': 'name',
            'interval': 'interval',
            'attributes': 'attributes'
        }

        self._name = name
        self._interval = interval
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt) -> 'MultimeterInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MultimeterInfo of this MultimeterInfo.  # noqa: E501
        :rtype: MultimeterInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this MultimeterInfo.


        :return: The name of this MultimeterInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MultimeterInfo.


        :param name: The name of this MultimeterInfo.
        :type name: str
        """

        self._name = name

    @property
    def interval(self) -> float:
        """Gets the interval of this MultimeterInfo.


        :return: The interval of this MultimeterInfo.
        :rtype: float
        """
        return self._interval

    @interval.setter
    def interval(self, interval: float):
        """Sets the interval of this MultimeterInfo.


        :param interval: The interval of this MultimeterInfo.
        :type interval: float
        """

        self._interval = interval

    @property
    def attributes(self) -> List[Attribute]:
        """Gets the attributes of this MultimeterInfo.


        :return: The attributes of this MultimeterInfo.
        :rtype: List[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: List[Attribute]):
        """Sets the attributes of this MultimeterInfo.


        :param attributes: The attributes of this MultimeterInfo.
        :type attributes: List[Attribute]
        """

        self._attributes = attributes
