# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from access_node.models.base_model_ import Model
from access_node.models.multimeter_info import MultimeterInfo  # noqa: F401,E501
from access_node import util


class Info(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, simulation_resolution: float=None, multimeters: List[MultimeterInfo]=None):  # noqa: E501
        """Info - a model defined in Swagger

        :param simulation_resolution: The simulation_resolution of this Info.  # noqa: E501
        :type simulation_resolution: float
        :param multimeters: The multimeters of this Info.  # noqa: E501
        :type multimeters: List[MultimeterInfo]
        """
        self.swagger_types = {
            'simulation_resolution': float,
            'multimeters': List[MultimeterInfo]
        }

        self.attribute_map = {
            'simulation_resolution': 'simulation_resolution',
            'multimeters': 'multimeters'
        }

        self._simulation_resolution = simulation_resolution
        self._multimeters = multimeters

    @classmethod
    def from_dict(cls, dikt) -> 'Info':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Info of this Info.  # noqa: E501
        :rtype: Info
        """
        return util.deserialize_model(dikt, cls)

    @property
    def simulation_resolution(self) -> float:
        """Gets the simulation_resolution of this Info.


        :return: The simulation_resolution of this Info.
        :rtype: float
        """
        return self._simulation_resolution

    @simulation_resolution.setter
    def simulation_resolution(self, simulation_resolution: float):
        """Sets the simulation_resolution of this Info.


        :param simulation_resolution: The simulation_resolution of this Info.
        :type simulation_resolution: float
        """

        self._simulation_resolution = simulation_resolution

    @property
    def multimeters(self) -> List[MultimeterInfo]:
        """Gets the multimeters of this Info.


        :return: The multimeters of this Info.
        :rtype: List[MultimeterInfo]
        """
        return self._multimeters

    @multimeters.setter
    def multimeters(self, multimeters: List[MultimeterInfo]):
        """Sets the multimeters of this Info.


        :param multimeters: The multimeters of this Info.
        :type multimeters: List[MultimeterInfo]
        """

        self._multimeters = multimeters
