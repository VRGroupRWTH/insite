# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from access_node.models.base_model_ import Model
from access_node import util


class NestKernelStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resolution=None, time=None, to_do=None, max_delay=None, min_delay=None, ms_per_tic=None, tics_per_ms=None, tics_per_step=None, t_max=None, t_min=None, total_num_virtual_procs=None, local_num_threads=None, num_processes=None, off_grid_spiking=None, initial_connector_capacity=None, large_connector_limit=None, large_connector_growth_factor=None, grng_seed=None, rng_seeds=None, data_path=None, data_prefix=None, overwrite_files=None, print_time=None, network_size=None, num_connections=None, use_wfr=None, wfr_comm_interval=None, wfr_tol=None, wfr_max_iterations=None, wfr_interpolation_order=None, dict_miss_is_error=None):  # noqa: E501
        """NestKernelStatus - a model defined in OpenAPI

        :param resolution: The resolution of this NestKernelStatus.  # noqa: E501
        :type resolution: float
        :param time: The time of this NestKernelStatus.  # noqa: E501
        :type time: float
        :param to_do: The to_do of this NestKernelStatus.  # noqa: E501
        :type to_do: int
        :param max_delay: The max_delay of this NestKernelStatus.  # noqa: E501
        :type max_delay: float
        :param min_delay: The min_delay of this NestKernelStatus.  # noqa: E501
        :type min_delay: float
        :param ms_per_tic: The ms_per_tic of this NestKernelStatus.  # noqa: E501
        :type ms_per_tic: float
        :param tics_per_ms: The tics_per_ms of this NestKernelStatus.  # noqa: E501
        :type tics_per_ms: float
        :param tics_per_step: The tics_per_step of this NestKernelStatus.  # noqa: E501
        :type tics_per_step: int
        :param t_max: The t_max of this NestKernelStatus.  # noqa: E501
        :type t_max: float
        :param t_min: The t_min of this NestKernelStatus.  # noqa: E501
        :type t_min: float
        :param total_num_virtual_procs: The total_num_virtual_procs of this NestKernelStatus.  # noqa: E501
        :type total_num_virtual_procs: int
        :param local_num_threads: The local_num_threads of this NestKernelStatus.  # noqa: E501
        :type local_num_threads: int
        :param num_processes: The num_processes of this NestKernelStatus.  # noqa: E501
        :type num_processes: int
        :param off_grid_spiking: The off_grid_spiking of this NestKernelStatus.  # noqa: E501
        :type off_grid_spiking: bool
        :param initial_connector_capacity: The initial_connector_capacity of this NestKernelStatus.  # noqa: E501
        :type initial_connector_capacity: int
        :param large_connector_limit: The large_connector_limit of this NestKernelStatus.  # noqa: E501
        :type large_connector_limit: int
        :param large_connector_growth_factor: The large_connector_growth_factor of this NestKernelStatus.  # noqa: E501
        :type large_connector_growth_factor: float
        :param grng_seed: The grng_seed of this NestKernelStatus.  # noqa: E501
        :type grng_seed: int
        :param rng_seeds: The rng_seeds of this NestKernelStatus.  # noqa: E501
        :type rng_seeds: List[int]
        :param data_path: The data_path of this NestKernelStatus.  # noqa: E501
        :type data_path: str
        :param data_prefix: The data_prefix of this NestKernelStatus.  # noqa: E501
        :type data_prefix: str
        :param overwrite_files: The overwrite_files of this NestKernelStatus.  # noqa: E501
        :type overwrite_files: bool
        :param print_time: The print_time of this NestKernelStatus.  # noqa: E501
        :type print_time: bool
        :param network_size: The network_size of this NestKernelStatus.  # noqa: E501
        :type network_size: int
        :param num_connections: The num_connections of this NestKernelStatus.  # noqa: E501
        :type num_connections: int
        :param use_wfr: The use_wfr of this NestKernelStatus.  # noqa: E501
        :type use_wfr: bool
        :param wfr_comm_interval: The wfr_comm_interval of this NestKernelStatus.  # noqa: E501
        :type wfr_comm_interval: float
        :param wfr_tol: The wfr_tol of this NestKernelStatus.  # noqa: E501
        :type wfr_tol: float
        :param wfr_max_iterations: The wfr_max_iterations of this NestKernelStatus.  # noqa: E501
        :type wfr_max_iterations: int
        :param wfr_interpolation_order: The wfr_interpolation_order of this NestKernelStatus.  # noqa: E501
        :type wfr_interpolation_order: int
        :param dict_miss_is_error: The dict_miss_is_error of this NestKernelStatus.  # noqa: E501
        :type dict_miss_is_error: bool
        """
        self.openapi_types = {
            'resolution': float,
            'time': float,
            'to_do': int,
            'max_delay': float,
            'min_delay': float,
            'ms_per_tic': float,
            'tics_per_ms': float,
            'tics_per_step': int,
            't_max': float,
            't_min': float,
            'total_num_virtual_procs': int,
            'local_num_threads': int,
            'num_processes': int,
            'off_grid_spiking': bool,
            'initial_connector_capacity': int,
            'large_connector_limit': int,
            'large_connector_growth_factor': float,
            'grng_seed': int,
            'rng_seeds': List[int],
            'data_path': str,
            'data_prefix': str,
            'overwrite_files': bool,
            'print_time': bool,
            'network_size': int,
            'num_connections': int,
            'use_wfr': bool,
            'wfr_comm_interval': float,
            'wfr_tol': float,
            'wfr_max_iterations': int,
            'wfr_interpolation_order': int,
            'dict_miss_is_error': bool
        }

        self.attribute_map = {
            'resolution': 'resolution',
            'time': 'time',
            'to_do': 'to_do',
            'max_delay': 'max_delay',
            'min_delay': 'min_delay',
            'ms_per_tic': 'ms_per_tic',
            'tics_per_ms': 'tics_per_ms',
            'tics_per_step': 'tics_per_step',
            't_max': 'T_max',
            't_min': 'T_min',
            'total_num_virtual_procs': 'total_num_virtual_procs',
            'local_num_threads': 'local_num_threads',
            'num_processes': 'num_processes',
            'off_grid_spiking': 'off_grid_spiking',
            'initial_connector_capacity': 'initial_connector_capacity',
            'large_connector_limit': 'large_connector_limit',
            'large_connector_growth_factor': 'large_connector_growth_factor',
            'grng_seed': 'grng_seed',
            'rng_seeds': 'rng_seeds',
            'data_path': 'data_path',
            'data_prefix': 'data_prefix',
            'overwrite_files': 'overwrite_files',
            'print_time': 'print_time',
            'network_size': 'network_size',
            'num_connections': 'num_connections',
            'use_wfr': 'use_wfr',
            'wfr_comm_interval': 'wfr_comm_interval',
            'wfr_tol': 'wfr_tol',
            'wfr_max_iterations': 'wfr_max_iterations',
            'wfr_interpolation_order': 'wfr_interpolation_order',
            'dict_miss_is_error': 'dict_miss_is_error'
        }

        self._resolution = resolution
        self._time = time
        self._to_do = to_do
        self._max_delay = max_delay
        self._min_delay = min_delay
        self._ms_per_tic = ms_per_tic
        self._tics_per_ms = tics_per_ms
        self._tics_per_step = tics_per_step
        self._t_max = t_max
        self._t_min = t_min
        self._total_num_virtual_procs = total_num_virtual_procs
        self._local_num_threads = local_num_threads
        self._num_processes = num_processes
        self._off_grid_spiking = off_grid_spiking
        self._initial_connector_capacity = initial_connector_capacity
        self._large_connector_limit = large_connector_limit
        self._large_connector_growth_factor = large_connector_growth_factor
        self._grng_seed = grng_seed
        self._rng_seeds = rng_seeds
        self._data_path = data_path
        self._data_prefix = data_prefix
        self._overwrite_files = overwrite_files
        self._print_time = print_time
        self._network_size = network_size
        self._num_connections = num_connections
        self._use_wfr = use_wfr
        self._wfr_comm_interval = wfr_comm_interval
        self._wfr_tol = wfr_tol
        self._wfr_max_iterations = wfr_max_iterations
        self._wfr_interpolation_order = wfr_interpolation_order
        self._dict_miss_is_error = dict_miss_is_error

    @classmethod
    def from_dict(cls, dikt) -> 'NestKernelStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NestKernelStatus of this NestKernelStatus.  # noqa: E501
        :rtype: NestKernelStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resolution(self):
        """Gets the resolution of this NestKernelStatus.

        The resolution of the simulation (in ms)  # noqa: E501

        :return: The resolution of this NestKernelStatus.
        :rtype: float
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this NestKernelStatus.

        The resolution of the simulation (in ms)  # noqa: E501

        :param resolution: The resolution of this NestKernelStatus.
        :type resolution: float
        """

        self._resolution = resolution

    @property
    def time(self):
        """Gets the time of this NestKernelStatus.

        The current simulation time  # noqa: E501

        :return: The time of this NestKernelStatus.
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this NestKernelStatus.

        The current simulation time  # noqa: E501

        :param time: The time of this NestKernelStatus.
        :type time: float
        """

        self._time = time

    @property
    def to_do(self):
        """Gets the to_do of this NestKernelStatus.

        The number of steps yet to be simulated (read only)  # noqa: E501

        :return: The to_do of this NestKernelStatus.
        :rtype: int
        """
        return self._to_do

    @to_do.setter
    def to_do(self, to_do):
        """Sets the to_do of this NestKernelStatus.

        The number of steps yet to be simulated (read only)  # noqa: E501

        :param to_do: The to_do of this NestKernelStatus.
        :type to_do: int
        """

        self._to_do = to_do

    @property
    def max_delay(self):
        """Gets the max_delay of this NestKernelStatus.

        The maximum delay in the network  # noqa: E501

        :return: The max_delay of this NestKernelStatus.
        :rtype: float
        """
        return self._max_delay

    @max_delay.setter
    def max_delay(self, max_delay):
        """Sets the max_delay of this NestKernelStatus.

        The maximum delay in the network  # noqa: E501

        :param max_delay: The max_delay of this NestKernelStatus.
        :type max_delay: float
        """

        self._max_delay = max_delay

    @property
    def min_delay(self):
        """Gets the min_delay of this NestKernelStatus.

        The minimum delay in the network  # noqa: E501

        :return: The min_delay of this NestKernelStatus.
        :rtype: float
        """
        return self._min_delay

    @min_delay.setter
    def min_delay(self, min_delay):
        """Sets the min_delay of this NestKernelStatus.

        The minimum delay in the network  # noqa: E501

        :param min_delay: The min_delay of this NestKernelStatus.
        :type min_delay: float
        """

        self._min_delay = min_delay

    @property
    def ms_per_tic(self):
        """Gets the ms_per_tic of this NestKernelStatus.

        The number of milliseconds per tic  # noqa: E501

        :return: The ms_per_tic of this NestKernelStatus.
        :rtype: float
        """
        return self._ms_per_tic

    @ms_per_tic.setter
    def ms_per_tic(self, ms_per_tic):
        """Sets the ms_per_tic of this NestKernelStatus.

        The number of milliseconds per tic  # noqa: E501

        :param ms_per_tic: The ms_per_tic of this NestKernelStatus.
        :type ms_per_tic: float
        """

        self._ms_per_tic = ms_per_tic

    @property
    def tics_per_ms(self):
        """Gets the tics_per_ms of this NestKernelStatus.

        The number of tics per millisecond  # noqa: E501

        :return: The tics_per_ms of this NestKernelStatus.
        :rtype: float
        """
        return self._tics_per_ms

    @tics_per_ms.setter
    def tics_per_ms(self, tics_per_ms):
        """Sets the tics_per_ms of this NestKernelStatus.

        The number of tics per millisecond  # noqa: E501

        :param tics_per_ms: The tics_per_ms of this NestKernelStatus.
        :type tics_per_ms: float
        """

        self._tics_per_ms = tics_per_ms

    @property
    def tics_per_step(self):
        """Gets the tics_per_step of this NestKernelStatus.

        The number of tics per simulation time step  # noqa: E501

        :return: The tics_per_step of this NestKernelStatus.
        :rtype: int
        """
        return self._tics_per_step

    @tics_per_step.setter
    def tics_per_step(self, tics_per_step):
        """Sets the tics_per_step of this NestKernelStatus.

        The number of tics per simulation time step  # noqa: E501

        :param tics_per_step: The tics_per_step of this NestKernelStatus.
        :type tics_per_step: int
        """

        self._tics_per_step = tics_per_step

    @property
    def t_max(self):
        """Gets the t_max of this NestKernelStatus.

        The largest representable time value (read only)  # noqa: E501

        :return: The t_max of this NestKernelStatus.
        :rtype: float
        """
        return self._t_max

    @t_max.setter
    def t_max(self, t_max):
        """Sets the t_max of this NestKernelStatus.

        The largest representable time value (read only)  # noqa: E501

        :param t_max: The t_max of this NestKernelStatus.
        :type t_max: float
        """

        self._t_max = t_max

    @property
    def t_min(self):
        """Gets the t_min of this NestKernelStatus.

        The smallest representable time value (read only)  # noqa: E501

        :return: The t_min of this NestKernelStatus.
        :rtype: float
        """
        return self._t_min

    @t_min.setter
    def t_min(self, t_min):
        """Sets the t_min of this NestKernelStatus.

        The smallest representable time value (read only)  # noqa: E501

        :param t_min: The t_min of this NestKernelStatus.
        :type t_min: float
        """

        self._t_min = t_min

    @property
    def total_num_virtual_procs(self):
        """Gets the total_num_virtual_procs of this NestKernelStatus.

        The total number of virtual processes  # noqa: E501

        :return: The total_num_virtual_procs of this NestKernelStatus.
        :rtype: int
        """
        return self._total_num_virtual_procs

    @total_num_virtual_procs.setter
    def total_num_virtual_procs(self, total_num_virtual_procs):
        """Sets the total_num_virtual_procs of this NestKernelStatus.

        The total number of virtual processes  # noqa: E501

        :param total_num_virtual_procs: The total_num_virtual_procs of this NestKernelStatus.
        :type total_num_virtual_procs: int
        """

        self._total_num_virtual_procs = total_num_virtual_procs

    @property
    def local_num_threads(self):
        """Gets the local_num_threads of this NestKernelStatus.

        The local number of threads  # noqa: E501

        :return: The local_num_threads of this NestKernelStatus.
        :rtype: int
        """
        return self._local_num_threads

    @local_num_threads.setter
    def local_num_threads(self, local_num_threads):
        """Sets the local_num_threads of this NestKernelStatus.

        The local number of threads  # noqa: E501

        :param local_num_threads: The local_num_threads of this NestKernelStatus.
        :type local_num_threads: int
        """

        self._local_num_threads = local_num_threads

    @property
    def num_processes(self):
        """Gets the num_processes of this NestKernelStatus.

        The number of MPI processes (read only)  # noqa: E501

        :return: The num_processes of this NestKernelStatus.
        :rtype: int
        """
        return self._num_processes

    @num_processes.setter
    def num_processes(self, num_processes):
        """Sets the num_processes of this NestKernelStatus.

        The number of MPI processes (read only)  # noqa: E501

        :param num_processes: The num_processes of this NestKernelStatus.
        :type num_processes: int
        """

        self._num_processes = num_processes

    @property
    def off_grid_spiking(self):
        """Gets the off_grid_spiking of this NestKernelStatus.

        Whether to transmit precise spike times in MPI communication (read only)  # noqa: E501

        :return: The off_grid_spiking of this NestKernelStatus.
        :rtype: bool
        """
        return self._off_grid_spiking

    @off_grid_spiking.setter
    def off_grid_spiking(self, off_grid_spiking):
        """Sets the off_grid_spiking of this NestKernelStatus.

        Whether to transmit precise spike times in MPI communication (read only)  # noqa: E501

        :param off_grid_spiking: The off_grid_spiking of this NestKernelStatus.
        :type off_grid_spiking: bool
        """

        self._off_grid_spiking = off_grid_spiking

    @property
    def initial_connector_capacity(self):
        """Gets the initial_connector_capacity of this NestKernelStatus.

        When a connector is first created, it starts with this capacity (if >= connector_cutoff)  # noqa: E501

        :return: The initial_connector_capacity of this NestKernelStatus.
        :rtype: int
        """
        return self._initial_connector_capacity

    @initial_connector_capacity.setter
    def initial_connector_capacity(self, initial_connector_capacity):
        """Sets the initial_connector_capacity of this NestKernelStatus.

        When a connector is first created, it starts with this capacity (if >= connector_cutoff)  # noqa: E501

        :param initial_connector_capacity: The initial_connector_capacity of this NestKernelStatus.
        :type initial_connector_capacity: int
        """

        self._initial_connector_capacity = initial_connector_capacity

    @property
    def large_connector_limit(self):
        """Gets the large_connector_limit of this NestKernelStatus.

        Capacity doubling is used up to this limit  # noqa: E501

        :return: The large_connector_limit of this NestKernelStatus.
        :rtype: int
        """
        return self._large_connector_limit

    @large_connector_limit.setter
    def large_connector_limit(self, large_connector_limit):
        """Sets the large_connector_limit of this NestKernelStatus.

        Capacity doubling is used up to this limit  # noqa: E501

        :param large_connector_limit: The large_connector_limit of this NestKernelStatus.
        :type large_connector_limit: int
        """

        self._large_connector_limit = large_connector_limit

    @property
    def large_connector_growth_factor(self):
        """Gets the large_connector_growth_factor of this NestKernelStatus.

        Capacity growth factor to use beyond the limit  # noqa: E501

        :return: The large_connector_growth_factor of this NestKernelStatus.
        :rtype: float
        """
        return self._large_connector_growth_factor

    @large_connector_growth_factor.setter
    def large_connector_growth_factor(self, large_connector_growth_factor):
        """Sets the large_connector_growth_factor of this NestKernelStatus.

        Capacity growth factor to use beyond the limit  # noqa: E501

        :param large_connector_growth_factor: The large_connector_growth_factor of this NestKernelStatus.
        :type large_connector_growth_factor: float
        """

        self._large_connector_growth_factor = large_connector_growth_factor

    @property
    def grng_seed(self):
        """Gets the grng_seed of this NestKernelStatus.

        Seed for global random number generator used synchronously by all virtual processes to create, e.g., fixed fan-out connections (write only).  # noqa: E501

        :return: The grng_seed of this NestKernelStatus.
        :rtype: int
        """
        return self._grng_seed

    @grng_seed.setter
    def grng_seed(self, grng_seed):
        """Sets the grng_seed of this NestKernelStatus.

        Seed for global random number generator used synchronously by all virtual processes to create, e.g., fixed fan-out connections (write only).  # noqa: E501

        :param grng_seed: The grng_seed of this NestKernelStatus.
        :type grng_seed: int
        """

        self._grng_seed = grng_seed

    @property
    def rng_seeds(self):
        """Gets the rng_seeds of this NestKernelStatus.

        Seeds for the per-virtual-process random number generators used for most purposes. Array with one integer per virtual process, all must be unique and differ from grng_seed (write only).  # noqa: E501

        :return: The rng_seeds of this NestKernelStatus.
        :rtype: List[int]
        """
        return self._rng_seeds

    @rng_seeds.setter
    def rng_seeds(self, rng_seeds):
        """Sets the rng_seeds of this NestKernelStatus.

        Seeds for the per-virtual-process random number generators used for most purposes. Array with one integer per virtual process, all must be unique and differ from grng_seed (write only).  # noqa: E501

        :param rng_seeds: The rng_seeds of this NestKernelStatus.
        :type rng_seeds: List[int]
        """

        self._rng_seeds = rng_seeds

    @property
    def data_path(self):
        """Gets the data_path of this NestKernelStatus.

        A path, where all data is written to (default is the current directory)  # noqa: E501

        :return: The data_path of this NestKernelStatus.
        :rtype: str
        """
        return self._data_path

    @data_path.setter
    def data_path(self, data_path):
        """Sets the data_path of this NestKernelStatus.

        A path, where all data is written to (default is the current directory)  # noqa: E501

        :param data_path: The data_path of this NestKernelStatus.
        :type data_path: str
        """

        self._data_path = data_path

    @property
    def data_prefix(self):
        """Gets the data_prefix of this NestKernelStatus.

        A common prefix for all data files  # noqa: E501

        :return: The data_prefix of this NestKernelStatus.
        :rtype: str
        """
        return self._data_prefix

    @data_prefix.setter
    def data_prefix(self, data_prefix):
        """Sets the data_prefix of this NestKernelStatus.

        A common prefix for all data files  # noqa: E501

        :param data_prefix: The data_prefix of this NestKernelStatus.
        :type data_prefix: str
        """

        self._data_prefix = data_prefix

    @property
    def overwrite_files(self):
        """Gets the overwrite_files of this NestKernelStatus.

        Whether to overwrite existing data files  # noqa: E501

        :return: The overwrite_files of this NestKernelStatus.
        :rtype: bool
        """
        return self._overwrite_files

    @overwrite_files.setter
    def overwrite_files(self, overwrite_files):
        """Sets the overwrite_files of this NestKernelStatus.

        Whether to overwrite existing data files  # noqa: E501

        :param overwrite_files: The overwrite_files of this NestKernelStatus.
        :type overwrite_files: bool
        """

        self._overwrite_files = overwrite_files

    @property
    def print_time(self):
        """Gets the print_time of this NestKernelStatus.

        Whether to print progress information during the simulation  # noqa: E501

        :return: The print_time of this NestKernelStatus.
        :rtype: bool
        """
        return self._print_time

    @print_time.setter
    def print_time(self, print_time):
        """Sets the print_time of this NestKernelStatus.

        Whether to print progress information during the simulation  # noqa: E501

        :param print_time: The print_time of this NestKernelStatus.
        :type print_time: bool
        """

        self._print_time = print_time

    @property
    def network_size(self):
        """Gets the network_size of this NestKernelStatus.

        The number of nodes in the network (read only)  # noqa: E501

        :return: The network_size of this NestKernelStatus.
        :rtype: int
        """
        return self._network_size

    @network_size.setter
    def network_size(self, network_size):
        """Sets the network_size of this NestKernelStatus.

        The number of nodes in the network (read only)  # noqa: E501

        :param network_size: The network_size of this NestKernelStatus.
        :type network_size: int
        """

        self._network_size = network_size

    @property
    def num_connections(self):
        """Gets the num_connections of this NestKernelStatus.

        The number of connections in the network (read only, local only)  # noqa: E501

        :return: The num_connections of this NestKernelStatus.
        :rtype: int
        """
        return self._num_connections

    @num_connections.setter
    def num_connections(self, num_connections):
        """Sets the num_connections of this NestKernelStatus.

        The number of connections in the network (read only, local only)  # noqa: E501

        :param num_connections: The num_connections of this NestKernelStatus.
        :type num_connections: int
        """

        self._num_connections = num_connections

    @property
    def use_wfr(self):
        """Gets the use_wfr of this NestKernelStatus.

        Whether to use waveform relaxation method  # noqa: E501

        :return: The use_wfr of this NestKernelStatus.
        :rtype: bool
        """
        return self._use_wfr

    @use_wfr.setter
    def use_wfr(self, use_wfr):
        """Sets the use_wfr of this NestKernelStatus.

        Whether to use waveform relaxation method  # noqa: E501

        :param use_wfr: The use_wfr of this NestKernelStatus.
        :type use_wfr: bool
        """

        self._use_wfr = use_wfr

    @property
    def wfr_comm_interval(self):
        """Gets the wfr_comm_interval of this NestKernelStatus.

        Desired waveform relaxation communication interval  # noqa: E501

        :return: The wfr_comm_interval of this NestKernelStatus.
        :rtype: float
        """
        return self._wfr_comm_interval

    @wfr_comm_interval.setter
    def wfr_comm_interval(self, wfr_comm_interval):
        """Sets the wfr_comm_interval of this NestKernelStatus.

        Desired waveform relaxation communication interval  # noqa: E501

        :param wfr_comm_interval: The wfr_comm_interval of this NestKernelStatus.
        :type wfr_comm_interval: float
        """

        self._wfr_comm_interval = wfr_comm_interval

    @property
    def wfr_tol(self):
        """Gets the wfr_tol of this NestKernelStatus.

        Convergence tolerance of waveform relaxation method  # noqa: E501

        :return: The wfr_tol of this NestKernelStatus.
        :rtype: float
        """
        return self._wfr_tol

    @wfr_tol.setter
    def wfr_tol(self, wfr_tol):
        """Sets the wfr_tol of this NestKernelStatus.

        Convergence tolerance of waveform relaxation method  # noqa: E501

        :param wfr_tol: The wfr_tol of this NestKernelStatus.
        :type wfr_tol: float
        """

        self._wfr_tol = wfr_tol

    @property
    def wfr_max_iterations(self):
        """Gets the wfr_max_iterations of this NestKernelStatus.

        Maximal number of iterations used for waveform relaxation  # noqa: E501

        :return: The wfr_max_iterations of this NestKernelStatus.
        :rtype: int
        """
        return self._wfr_max_iterations

    @wfr_max_iterations.setter
    def wfr_max_iterations(self, wfr_max_iterations):
        """Sets the wfr_max_iterations of this NestKernelStatus.

        Maximal number of iterations used for waveform relaxation  # noqa: E501

        :param wfr_max_iterations: The wfr_max_iterations of this NestKernelStatus.
        :type wfr_max_iterations: int
        """

        self._wfr_max_iterations = wfr_max_iterations

    @property
    def wfr_interpolation_order(self):
        """Gets the wfr_interpolation_order of this NestKernelStatus.

        Interpolation order of polynomial used in wfr iterations  # noqa: E501

        :return: The wfr_interpolation_order of this NestKernelStatus.
        :rtype: int
        """
        return self._wfr_interpolation_order

    @wfr_interpolation_order.setter
    def wfr_interpolation_order(self, wfr_interpolation_order):
        """Sets the wfr_interpolation_order of this NestKernelStatus.

        Interpolation order of polynomial used in wfr iterations  # noqa: E501

        :param wfr_interpolation_order: The wfr_interpolation_order of this NestKernelStatus.
        :type wfr_interpolation_order: int
        """

        self._wfr_interpolation_order = wfr_interpolation_order

    @property
    def dict_miss_is_error(self):
        """Gets the dict_miss_is_error of this NestKernelStatus.

        Whether missed dictionary entries are treated as errors  # noqa: E501

        :return: The dict_miss_is_error of this NestKernelStatus.
        :rtype: bool
        """
        return self._dict_miss_is_error

    @dict_miss_is_error.setter
    def dict_miss_is_error(self, dict_miss_is_error):
        """Sets the dict_miss_is_error of this NestKernelStatus.

        Whether missed dictionary entries are treated as errors  # noqa: E501

        :param dict_miss_is_error: The dict_miss_is_error of this NestKernelStatus.
        :type dict_miss_is_error: bool
        """

        self._dict_miss_is_error = dict_miss_is_error
