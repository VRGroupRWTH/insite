# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from access_node.models.base_model_ import Model
from access_node import util


class MultimeterMeasurement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, simulation_times=None, neuron_ids=None, values=None):  # noqa: E501
        """MultimeterMeasurement - a model defined in OpenAPI

        :param simulation_times: The simulation_times of this MultimeterMeasurement.  # noqa: E501
        :type simulation_times: List[float]
        :param neuron_ids: The neuron_ids of this MultimeterMeasurement.  # noqa: E501
        :type neuron_ids: List[int]
        :param values: The values of this MultimeterMeasurement.  # noqa: E501
        :type values: List[float]
        """
        self.openapi_types = {
            'simulation_times': List[float],
            'neuron_ids': List[int],
            'values': List[float]
        }

        self.attribute_map = {
            'simulation_times': 'simulationTimes',
            'neuron_ids': 'neuronIds',
            'values': 'values'
        }

        self._simulation_times = simulation_times
        self._neuron_ids = neuron_ids
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'MultimeterMeasurement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MultimeterMeasurement of this MultimeterMeasurement.  # noqa: E501
        :rtype: MultimeterMeasurement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def simulation_times(self):
        """Gets the simulation_times of this MultimeterMeasurement.

        This array is always sorted.  # noqa: E501

        :return: The simulation_times of this MultimeterMeasurement.
        :rtype: List[float]
        """
        return self._simulation_times

    @simulation_times.setter
    def simulation_times(self, simulation_times):
        """Sets the simulation_times of this MultimeterMeasurement.

        This array is always sorted.  # noqa: E501

        :param simulation_times: The simulation_times of this MultimeterMeasurement.
        :type simulation_times: List[float]
        """

        self._simulation_times = simulation_times

    @property
    def neuron_ids(self):
        """Gets the neuron_ids of this MultimeterMeasurement.


        :return: The neuron_ids of this MultimeterMeasurement.
        :rtype: List[int]
        """
        return self._neuron_ids

    @neuron_ids.setter
    def neuron_ids(self, neuron_ids):
        """Sets the neuron_ids of this MultimeterMeasurement.


        :param neuron_ids: The neuron_ids of this MultimeterMeasurement.
        :type neuron_ids: List[int]
        """

        self._neuron_ids = neuron_ids

    @property
    def values(self):
        """Gets the values of this MultimeterMeasurement.

        This array contains the measured values for each neuron ID and time to get the value for neuron ID n at time t you have to use the index n * length(simulationTimes) + t  # noqa: E501

        :return: The values of this MultimeterMeasurement.
        :rtype: List[float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this MultimeterMeasurement.

        This array contains the measured values for each neuron ID and time to get the value for neuron ID n at time t you have to use the index n * length(simulationTimes) + t  # noqa: E501

        :param values: The values of this MultimeterMeasurement.
        :type values: List[float]
        """

        self._values = values
