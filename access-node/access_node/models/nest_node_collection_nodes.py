# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from access_node.models.base_model_ import Model
from access_node import util


class NestNodeCollectionNodes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_id=None, last_id=None, count=None):  # noqa: E501
        """NestNodeCollectionNodes - a model defined in OpenAPI

        :param first_id: The first_id of this NestNodeCollectionNodes.  # noqa: E501
        :type first_id: int
        :param last_id: The last_id of this NestNodeCollectionNodes.  # noqa: E501
        :type last_id: int
        :param count: The count of this NestNodeCollectionNodes.  # noqa: E501
        :type count: int
        """
        self.openapi_types = {
            'first_id': int,
            'last_id': int,
            'count': int
        }

        self.attribute_map = {
            'first_id': 'firstId',
            'last_id': 'lastId',
            'count': 'count'
        }

        self._first_id = first_id
        self._last_id = last_id
        self._count = count

    @classmethod
    def from_dict(cls, dikt) -> 'NestNodeCollectionNodes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NestNodeCollectionNodes of this NestNodeCollectionNodes.  # noqa: E501
        :rtype: NestNodeCollectionNodes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_id(self):
        """Gets the first_id of this NestNodeCollectionNodes.


        :return: The first_id of this NestNodeCollectionNodes.
        :rtype: int
        """
        return self._first_id

    @first_id.setter
    def first_id(self, first_id):
        """Sets the first_id of this NestNodeCollectionNodes.


        :param first_id: The first_id of this NestNodeCollectionNodes.
        :type first_id: int
        """

        self._first_id = first_id

    @property
    def last_id(self):
        """Gets the last_id of this NestNodeCollectionNodes.


        :return: The last_id of this NestNodeCollectionNodes.
        :rtype: int
        """
        return self._last_id

    @last_id.setter
    def last_id(self, last_id):
        """Sets the last_id of this NestNodeCollectionNodes.


        :param last_id: The last_id of this NestNodeCollectionNodes.
        :type last_id: int
        """

        self._last_id = last_id

    @property
    def count(self):
        """Gets the count of this NestNodeCollectionNodes.


        :return: The count of this NestNodeCollectionNodes.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this NestNodeCollectionNodes.


        :param count: The count of this NestNodeCollectionNodes.
        :type count: int
        """

        self._count = count
