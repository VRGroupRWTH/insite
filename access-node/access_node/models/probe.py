# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from access_node.models.base_model_ import Model
from access_node import util


class Probe(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, cell_id: int=None, segment_id: int=None, position: float=None):  # noqa: E501
        """Probe - a model defined in Swagger

        :param id: The id of this Probe.  # noqa: E501
        :type id: int
        :param cell_id: The cell_id of this Probe.  # noqa: E501
        :type cell_id: int
        :param segment_id: The segment_id of this Probe.  # noqa: E501
        :type segment_id: int
        :param position: The position of this Probe.  # noqa: E501
        :type position: float
        """
        self.swagger_types = {
            'id': int,
            'cell_id': int,
            'segment_id': int,
            'position': float
        }

        self.attribute_map = {
            'id': 'id',
            'cell_id': 'cell_id',
            'segment_id': 'segment_id',
            'position': 'position'
        }

        self._id = id
        self._cell_id = cell_id
        self._segment_id = segment_id
        self._position = position

    @classmethod
    def from_dict(cls, dikt) -> 'Probe':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Probe of this Probe.  # noqa: E501
        :rtype: Probe
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Probe.


        :return: The id of this Probe.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Probe.


        :param id: The id of this Probe.
        :type id: int
        """

        self._id = id

    @property
    def cell_id(self) -> int:
        """Gets the cell_id of this Probe.


        :return: The cell_id of this Probe.
        :rtype: int
        """
        return self._cell_id

    @cell_id.setter
    def cell_id(self, cell_id: int):
        """Sets the cell_id of this Probe.


        :param cell_id: The cell_id of this Probe.
        :type cell_id: int
        """

        self._cell_id = cell_id

    @property
    def segment_id(self) -> int:
        """Gets the segment_id of this Probe.


        :return: The segment_id of this Probe.
        :rtype: int
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id: int):
        """Sets the segment_id of this Probe.


        :param segment_id: The segment_id of this Probe.
        :type segment_id: int
        """

        self._segment_id = segment_id

    @property
    def position(self) -> float:
        """Gets the position of this Probe.


        :return: The position of this Probe.
        :rtype: float
        """
        return self._position

    @position.setter
    def position(self, position: float):
        """Sets the position of this Probe.


        :param position: The position of this Probe.
        :type position: float
        """

        self._position = position
