# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from access_node.models.base_model_ import Model
from access_node import util


class Version(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api=None, insite=None):  # noqa: E501
        """Version - a model defined in OpenAPI

        :param api: The api of this Version.  # noqa: E501
        :type api: str
        :param insite: The insite of this Version.  # noqa: E501
        :type insite: str
        """
        self.openapi_types = {
            'api': str,
            'insite': str
        }

        self.attribute_map = {
            'api': 'api',
            'insite': 'insite'
        }

        self._api = api
        self._insite = insite

    @classmethod
    def from_dict(cls, dikt) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Version of this Version.  # noqa: E501
        :rtype: Version
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api(self):
        """Gets the api of this Version.


        :return: The api of this Version.
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this Version.


        :param api: The api of this Version.
        :type api: str
        """
        if api is None:
            raise ValueError("Invalid value for `api`, must not be `None`")  # noqa: E501

        self._api = api

    @property
    def insite(self):
        """Gets the insite of this Version.


        :return: The insite of this Version.
        :rtype: str
        """
        return self._insite

    @insite.setter
    def insite(self, insite):
        """Sets the insite of this Version.


        :param insite: The insite of this Version.
        :type insite: str
        """
        if insite is None:
            raise ValueError("Invalid value for `insite`, must not be `None`")  # noqa: E501

        self._insite = insite
