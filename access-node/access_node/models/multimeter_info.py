# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from access_node.models.base_model_ import Model
from access_node import util


class MultimeterInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, attributes=None, neuron_ids=None):  # noqa: E501
        """MultimeterInfo - a model defined in OpenAPI

        :param id: The id of this MultimeterInfo.  # noqa: E501
        :type id: int
        :param attributes: The attributes of this MultimeterInfo.  # noqa: E501
        :type attributes: List[str]
        :param neuron_ids: The neuron_ids of this MultimeterInfo.  # noqa: E501
        :type neuron_ids: List[int]
        """
        self.openapi_types = {
            'id': int,
            'attributes': List[str],
            'neuron_ids': List[int]
        }

        self.attribute_map = {
            'id': 'id',
            'attributes': 'attributes',
            'neuron_ids': 'neuronIds'
        }

        self._id = id
        self._attributes = attributes
        self._neuron_ids = neuron_ids

    @classmethod
    def from_dict(cls, dikt) -> 'MultimeterInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MultimeterInfo of this MultimeterInfo.  # noqa: E501
        :rtype: MultimeterInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MultimeterInfo.


        :return: The id of this MultimeterInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MultimeterInfo.


        :param id: The id of this MultimeterInfo.
        :type id: int
        """

        self._id = id

    @property
    def attributes(self):
        """Gets the attributes of this MultimeterInfo.


        :return: The attributes of this MultimeterInfo.
        :rtype: List[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MultimeterInfo.


        :param attributes: The attributes of this MultimeterInfo.
        :type attributes: List[str]
        """

        self._attributes = attributes

    @property
    def neuron_ids(self):
        """Gets the neuron_ids of this MultimeterInfo.


        :return: The neuron_ids of this MultimeterInfo.
        :rtype: List[int]
        """
        return self._neuron_ids

    @neuron_ids.setter
    def neuron_ids(self, neuron_ids):
        """Sets the neuron_ids of this MultimeterInfo.


        :param neuron_ids: The neuron_ids of this MultimeterInfo.
        :type neuron_ids: List[int]
        """

        self._neuron_ids = neuron_ids
