# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from access_node.models.base_model_ import Model
from access_node import util


class MultimeterInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, multimeter_id=None, attributes=None, node_ids=None):  # noqa: E501
        """MultimeterInfo - a model defined in OpenAPI

        :param multimeter_id: The multimeter_id of this MultimeterInfo.  # noqa: E501
        :type multimeter_id: int
        :param attributes: The attributes of this MultimeterInfo.  # noqa: E501
        :type attributes: List[str]
        :param node_ids: The node_ids of this MultimeterInfo.  # noqa: E501
        :type node_ids: List[int]
        """
        self.openapi_types = {
            'multimeter_id': int,
            'attributes': List[str],
            'node_ids': List[int]
        }

        self.attribute_map = {
            'multimeter_id': 'multimeterId',
            'attributes': 'attributes',
            'node_ids': 'nodeIds'
        }

        self._multimeter_id = multimeter_id
        self._attributes = attributes
        self._node_ids = node_ids

    @classmethod
    def from_dict(cls, dikt) -> 'MultimeterInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MultimeterInfo of this MultimeterInfo.  # noqa: E501
        :rtype: MultimeterInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def multimeter_id(self):
        """Gets the multimeter_id of this MultimeterInfo.


        :return: The multimeter_id of this MultimeterInfo.
        :rtype: int
        """
        return self._multimeter_id

    @multimeter_id.setter
    def multimeter_id(self, multimeter_id):
        """Sets the multimeter_id of this MultimeterInfo.


        :param multimeter_id: The multimeter_id of this MultimeterInfo.
        :type multimeter_id: int
        """

        self._multimeter_id = multimeter_id

    @property
    def attributes(self):
        """Gets the attributes of this MultimeterInfo.


        :return: The attributes of this MultimeterInfo.
        :rtype: List[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MultimeterInfo.


        :param attributes: The attributes of this MultimeterInfo.
        :type attributes: List[str]
        """

        self._attributes = attributes

    @property
    def node_ids(self):
        """Gets the node_ids of this MultimeterInfo.


        :return: The node_ids of this MultimeterInfo.
        :rtype: List[int]
        """
        return self._node_ids

    @node_ids.setter
    def node_ids(self, node_ids):
        """Sets the node_ids of this MultimeterInfo.


        :param node_ids: The node_ids of this MultimeterInfo.
        :type node_ids: List[int]
        """

        self._node_ids = node_ids
