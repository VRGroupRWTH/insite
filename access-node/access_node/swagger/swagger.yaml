---
swagger: "2.0"
info:
  description: "This is the REST API for the in-situ pipeline."
  version: "1.0.0"
  title: "In-Situ Pipeline REST API"
host: "localhost"
basePath: "/"
schemes:
- "https"
- "http"
paths:
  /arbor/spikes:
    get:
      tags:
      - "arbor"
      summary: "Retrieves the spikes for the given simulation times (optional),  cell\
        \ and segment (optional)."
      operationId: "arbor_get_spikes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "from"
        in: "query"
        description: "The start time (including) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "to"
        in: "query"
        description: "The end time (excluding) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "cell_ids"
        in: "query"
        description: "A list of cell ids queried for spike data."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "uint64"
      - name: "segment_ids"
        in: "query"
        description: "A list of segment ids queried for spike data."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "uint64"
      - name: "offset"
        in: "query"
        description: "The offset into the result."
        required: false
        type: "integer"
        format: "uint64"
      - name: "limit"
        in: "query"
        description: "The maximum number of entries to be result."
        required: false
        type: "integer"
        format: "uint64"
      responses:
        "200":
          description: "Operation successful."
          schema:
            $ref: "#/definitions/Spikes"
        "400":
          description: "Operation failed."
          schema:
            type: "string"
            example: "Error message"
      x-swagger-router-controller: "access_node.controllers.arbor_controller"
  /arbor/cell_ids:
    get:
      tags:
      - "arbor"
      summary: "Retrieves a list of all cell ids."
      operationId: "arbor_get_cell_ids"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Operation successful."
          schema:
            type: "array"
            items:
              type: "integer"
              format: "uint64"
            example:
            - 1
            - 2
        "400":
          description: "Operation failed."
          schema:
            type: "string"
            example: "Error message"
      x-swagger-router-controller: "access_node.controllers.arbor_controller"
  /arbor/probes:
    get:
      tags:
      - "arbor"
      summary: "Retrieves a list of all probes for a given attribute (optional)."
      operationId: "arbor_get_probes"
      produces:
      - "application/json"
      parameters:
      - name: "attribute"
        in: "query"
        description: "The attribute measured for which existing probes will be returned."
        required: false
        type: "string"
      responses:
        "200":
          description: "Operation successful."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Probe"
        "400":
          description: "Operation failed."
          schema:
            type: "string"
            example: "Error message"
      x-swagger-router-controller: "access_node.controllers.arbor_controller"
  /arbor/attributes:
    get:
      tags:
      - "arbor"
      summary: "Retrieves a list of all attributes."
      operationId: "arbor_get_attributes"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Operation successful."
          schema:
            type: "array"
            items:
              type: "string"
            example:
            - "Voltage"
            - "Current"
        "400":
          description: "Operation failed."
          schema:
            type: "string"
            example: "Error message"
      x-swagger-router-controller: "access_node.controllers.arbor_controller"
  /arbor/measurements:
    get:
      tags:
      - "arbor"
      summary: "Retrieves the measurements for given probes (optional)."
      operationId: "arbor_get_measurements"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "attribute"
        in: "query"
        description: "The attribute to query"
        required: true
        type: "string"
      - name: "probe_ids"
        in: "query"
        description: "A list of probes ids queried for data."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "uint64"
      - name: "from"
        in: "query"
        description: "The start time (including) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "to"
        in: "query"
        description: "The end time (excluding) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "offset"
        in: "query"
        description: "The offset into the result."
        required: false
        type: "integer"
        format: "uint64"
      - name: "limit"
        in: "query"
        description: "The maximum number of entries to be returned."
        required: false
        type: "integer"
        format: "uint64"
      responses:
        "200":
          description: "Operation successful."
          schema:
            $ref: "#/definitions/ArborMeasurement"
        "400":
          description: "Operation failed."
          schema:
            type: "string"
            example: "Error message"
      x-swagger-router-controller: "access_node.controllers.arbor_controller"
  /arbor/simulation_time_info:
    get:
      tags:
      - "arbor"
      summary: "Retrieves simulation time information(begin, current, end)."
      operationId: "arbor_get_simulation_time_info"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Operation successful."
          schema:
            $ref: "#/definitions/SimulationTimeInfo"
        "400":
          description: "Operation failed."
          schema:
            type: "string"
            example: "Error message"
      x-swagger-router-controller: "access_node.controllers.arbor_controller"
  /arbor/cell_properties:
    get:
      tags:
      - "arbor"
      summary: "Retrieves the properties of the specified cells."
      operationId: "arbor_get_cell_properties"
      produces:
      - "application/json"
      parameters:
      - name: "cell_ids"
        in: "query"
        description: "A list of cell IDs queried for properties."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "uint64"
      responses:
        "200":
          description: "Operation successful."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ArborCellProperties"
        "400":
          description: "Operation failed."
          schema:
            type: "string"
            example: "Error message"
      x-swagger-router-controller: "access_node.controllers.arbor_controller"
  /nest/simulationTimeInfo:
    get:
      tags:
      - "nest"
      summary: "Retrieves simulation time information (stepSize, begin, current, end)."
      operationId: "nest_get_simulation_time_info"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Operation successful."
          schema:
            $ref: "#/definitions/SimulationTimeInfo"
        "500":
          description: "Operation failed."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/neurons:
    get:
      tags:
      - "nest"
      summary: "Retrieves the properties of the specified neurons."
      operationId: "nest_get_neurons"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Operation successful."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NestNeuronProperties"
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/neurons/{neuronId}:
    get:
      tags:
      - "nest"
      summary: "Retrieves the properties of the specified neuron."
      operationId: "nest_get_neuron_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "neuronId"
        in: "path"
        description: "The ID of the queried neuron."
        required: true
        type: "integer"
        format: "uint64"
      responses:
        "200":
          description: "Operation successful."
          schema:
            $ref: "#/definitions/NestNeuronProperties"
        "400":
          description: "Operation failed due to invalid request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/neurons/ids:
    get:
      tags:
      - "nest"
      summary: "Retrieves a list of all neuron IDs accessable via the pipeline."
      operationId: "nest_get_neuron_ids"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Operation successful."
          schema:
            type: "array"
            items:
              type: "integer"
              format: "uint64"
            example:
            - 1
            - 2
            - 3
            - 15
        "500":
          description: "Operation failed."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/populations:
    get:
      tags:
      - "nest"
      summary: "Retrieves a list of all accessable population IDs."
      operationId: "nest_get_populations"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Operation successful."
          schema:
            type: "array"
            items:
              type: "integer"
              format: "uint64"
            example:
            - 1
            - 2
            - 3
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/populations/{populationId}/neurons:
    get:
      tags:
      - "nest"
      summary: "Retrieves the neurons that belong to the specified population."
      operationId: "nest_get_neurons_by_population"
      produces:
      - "application/json"
      parameters:
      - name: "populationId"
        in: "path"
        description: "The population ID to query the neurons for."
        required: true
        type: "array"
        items:
          type: "integer"
          format: "uint64"
      responses:
        "200":
          description: "Operation successful."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NestNeuronProperties"
        "400":
          description: "Operation failed due to invalid request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/populations/${populationId}/neurons/ids:
    get:
      tags:
      - "nest"
      summary: "Retrieves the list of all neuron ids within the population."
      operationId: "nest_get_neuron_ids_by_population"
      produces:
      - "application/json"
      parameters:
      - name: "populationId"
        in: "path"
        description: "The identifier of the population"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        "200":
          description: "Operation successful."
          schema:
            type: "array"
            items:
              type: "integer"
              format: "uint64"
            example:
            - 1
            - 2
        "400":
          description: "Operation failed due to invalid request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/spikedetectors/:
    get:
      tags:
      - "nest"
      summary: "Queries all spike detectors accessable to the pipeline."
      operationId: "nest_get_spikedetectors"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Operation successful."
          schema:
            $ref: "#/definitions/SpikedetectorInfo"
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/spikedetectors/{spikedetectorId}/spikes:
    get:
      tags:
      - "nest"
      summary: "Retrieves the spikes for the given time range (optional) and neuron IDs (optional) from one spike detector. If no time range or neuron list is specified, it will return the spikes for whole time or all neurons respectively."
      operationId: "nest_get_spikes_by_spikedetector"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "spikedetectorId"
        description: "The ID of the spike detector to query."
        in: "path"
        required: true
        format: "integer"
      - name: "fromTime"
        in: "query"
        description: "The start time in milliseconds (including) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "toTime"
        in: "query"
        description: "The end time in milliseconds (excluding) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "neuronIds"
        in: "query"
        description: "A list of neuron IDs queried for spike data."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "uint64"
      - name: "skip"
        in: "query"
        description: "The offset into the result."
        required: false
        type: "integer"
        format: "uint64"
      - name: "top"
        in: "query"
        description: "The maximum number of entries to be returned."
        required: false
        type: "integer"
        format: "uint64"
      responses:
        "200":
          description: "Operation successful."
          schema:
            $ref: "#/definitions/Spikes"
        "400":
          description: "Operation failed due to invalid request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/spikes:
    get:
      tags:
      - "nest"
      summary: "Retrieves the spikes for the given time range (optional) and neuron IDs (optional). If no time range or neuron list is specified, it will return the spikes for whole time or all neurons respectively. This request merges the spikes recorded by all spike detectors and removes duplicates."
      operationId: "nest_get_spikes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "fromTime"
        in: "query"
        description: "The start time in milliseconds (including) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "toTime"
        in: "query"
        description: "The end time in milliseconds (excluding) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "neuronIds"
        in: "query"
        description: "A list of neuron IDs queried for spike data."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "uint64"
      - name: "skip"
        in: "query"
        description: "The offset into the result."
        required: false
        type: "integer"
        format: "uint64"
      - name: "top"
        in: "query"
        description: "The maximum number of entries to be returned."
        required: false
        type: "integer"
        format: "uint64"
      responses:
        "200":
          description: "Operation successful."
          schema:
            $ref: "#/definitions/Spikes"
        "400":
          description: "Operation failed due to invalid request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/populations/{populationId}/spikes:
    get:
      tags:
      - "nest"
      summary: "Retrieves the spikes for the given simulation steps (optional) and population. This request merges the spikes recorded by all spike detectors and removes duplicates."
      operationId: "nest_get_spikes_by_population"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "populationId"
        in: "path"
        description: "The identifier of the population."
        required: true
        type: "integer"
        format: "uint64"
      - name: "fromTime"
        in: "query"
        description: "The start time (including) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "toTime"
        in: "query"
        description: "The end time (excluding) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "skip"
        in: "query"
        description: "The offset into the result."
        required: false
        type: "integer"
        format: "uint64"
      - name: "top"
        in: "query"
        description: "The maximum numbers of entries to be returned."
        required: false
        type: "integer"
        format: "uint64"
      responses:
        "200":
          description: "Operation successful."
          schema:
            $ref: "#/definitions/Spikes"
        "400":
          description: "Operation failed due to invalid request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/multimeters:
    get:
      tags:
      - "nest"
      summary: "Retreives the available multimeters and their properties."
      operationId: "nest_get_multimeters"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Operation successful."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MultimeterInfo"
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/multimeters/{multimeterId}:
    get:
      tags:
      - "nest"
      summary: "Retreives the available multimeters and their properties."
      operationId: "nest_get_multimeter_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "multimeterId"
        in: "path"
        description: "The identifier of the multimeter."
        required: true
        type: "integer"
        format: "uint64"
      responses:
        "200":
          description: "Operation successful."
          schema:
            $ref: "#/definitions/MultimeterInfo"
        "400":
          description: "Operation failed due to invalid request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
  /nest/multimeters/{multimeterId}/attributes/{attributeName}:
    get:
      tags:
      - "nest"
      summary: "Retrieves the measurements for a multimeter, attribute and neuron IDs (optional)."
      operationId: "nest_get_multimeter_measurements"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "multimeterId"
        in: "path"
        description: "The multimeter to query"
        required: true
        type: "integer"
        format: "uint64"
      - name: "attributeName"
        in: "path"
        description: "The attribute to query (e.g., 'V_m' for the membrane potential)"
        required: true
        type: "string"
      - name: "fromTime"
        in: "query"
        description: "The start time (including) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "toTime"
        in: "query"
        description: "The end time (excluding) to be queried."
        required: false
        type: "number"
        format: "double"
      - name: "neuronIds"
        in: "query"
        description: "A list of neuron IDs queried for attribute data."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "uint64"
      - name: "skip"
        in: "query"
        description: "The offset into the result."
        required: false
        type: "integer"
        format: "uint64"
      - name: "top"
        in: "query"
        description: "The maximum number of entries to be returned."
        required: false
        type: "integer"
        format: "uint64"
      responses:
        "200":
          description: "Operation successful."
          schema:
            $ref: "#/definitions/MultimeterMeasurement"
        "400":
          description: "Operation failed due to invalid request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Operation failed due to server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "access_node.controllers.nest_controller"
definitions:
  ErrorResponse:
    type: "object"
    properties:
      error:
        $ref: "#/definitions/Error"
    required:
      - error
  Error:
    type: "object"
    properties:
      code:
        type: "string"
        description: "One of the error codes defined here: [...]"
      message:
        type: "string"
        description: "A human-readable representation of the error."
      innererror:
        $ref: "#/definitions/InnerError"
    required:
      - code
      - message
  InnerError:
    type: "object"
    properties:
      code:
        type: "string"
        description: "One of the error codes defined here: [...]"
      innererror:
        $ref: "#/definitions/InnerError"
    required:
      - code
  Spikes:
    type: "object"
    properties:
      simulationTimes:
        type: "array"
        description: "This array is always sorted."
        items:
          type: "number"
          format: "double"
      neuronIds:
        type: "array"
        items:
          type: "integer"
          format: "uint64"
    example:
      simulationTimes:
      - 0.8
      - 0.9
      neuronIds:
      - 1
      - 2
  MultimeterMeasurement:
    type: "object"
    properties:
      simulationTimes:
        type: "array"
        description: "This array is always sorted."
        items:
          type: "number"
          format: "double"
      neuronIds:
        type: "array"
        items:
          type: "integer"
          format: "uint64"
      values:
        type: "array"
        description: "This array contains the measured values for each neuron ID and time to get the value for neuron ID n at time t you have to use the index n * length(simulationTimes) + t"
        items:
          type: "number"
    example:
      simulationTimes:
      - 0.1
      - 0.2
      neuronIds:
      - 1
      - 2
      - 3
      values:
      - 0.123
      - 0.123
      - 0.123
      - 0.123
      - 0.123
      - 0.123
  ArborMeasurement:
    type: "object"
    properties:
      simulation_times:
        type: "array"
        description: "This array is always sorted."
        items:
          type: "number"
          format: "double"
      gids:
        type: "array"
        items:
          type: "integer"
          format: "uint64"
      values:
        type: "array"
        description: "This array contains the measured values for each gid and time to get the value for gid n at time t you have to use the index n * length(simulation_times) + t"
        items:
          type: "number"
    example:
      simulation_times:
      - 0.1
      - 0.2
      gids:
      - 1
      - 2
      - 3
      values:
      - 0.123
      - 0.123
      - 0.123
      - 0.123
      - 0.123
      - 0.123
  Probe:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "uint64"
      cell_id:
        type: "integer"
        format: "uint64"
      segment_id:
        type: "integer"
        format: "uint64"
      position:
        type: "number"
        format: "double"
    example:
      id: 1
      cell_id: 2
      segment_id: 1
      position: 0.4
  ArborCellProperties:
    type: "object"
    properties:
      neuron_id:
        type: "integer"
        format: "uint64"
      properties:
        type: "object"
        properties: {}
    example:
      population: "pop1"
      position:
      - 0.1
      - 0.1
      - 0.1
  NestNeuronProperties:
    type: "object"
    properties:
      neuronId:
        type: "integer"
        format: "uint64"
      properties:
        type: "object"
        properties: {}
    example:
      neuronId: 1
      properties:
        population: 2
        position:
        - 0.1
        - 0.1
        - 0.1
  SimulationTimeInfo:
    type: "object"
    properties:
      stepSize:
        type: "number"
        format: "double"
      begin:
        type: "number"
        format: "double"
      end:
        type: "number"
        format: "double"
      current:
        type: "number"
        format: "double"
    example:
      stepSize: 0.1
      current: 2.1
      begin: 0.1
      end: 4.5
  MultimeterInfo:
    properties:
      id:
        type: "integer"
        format: "uint64"
      attributes:
        type: "array"
        items:
          type: "string"
      neuronIds:
        type: "array"
        items:
          type: "integer"
          format: "uint64"
    example:
      id: 0
      attributes: ["V_m"]
      neuronIds: [0, 1, 3, 5]
  SpikedetectorInfo:
    properties:
      id:
        type: "integer"
        format: "uint64"
      neuronIds:
        type: "array"
        items:
          type: "integer"
          format: "uint64"
    example:
      id: 0
      neuronIds: [0, 1, 3, 5]