openapi: 3.0.1
info:
  description: |
    # Insite
    This is the documentation for Insite.<br>
    Insite is the in-situ-pipeline developed in the Human Brain Project's Task 5.7.<br>
    The goal is to provide middleware that enables users to easily acquire data from neural simulators as soon as data is available while the simulation is still running.
    Thus, enabling the ability to access simulation data in an in-situ approach.
    The data from multiple simulator instances can be accessed via a single centralized HTTP endpoint.
    This enables users to easily create in-situ visualizations of neural simulations without the knowledge of the simulation's underlying architecture or any further knowledge about the computational distribution of the simulation.
    Users can query the HTTP endpoint for different datapoints, such as: spike data, multimeter data, the topology of the neural network and so on (see full API below).
    Additionally, the API provides functionality to filter the requested data, thus making specific data requests easier.
    The queried data is returned encoded in JSON to have a low friction data format that is supported by many languages and frameworks.
    Thus, enabling the user to easily create interesting applications that consume the provided data.

    Insite consists of two main parts. The first part is the extension for the Neural Simulator which allows the in-situ data streaming of simulation data.
    The second part is a HTTP server, called the access-node, which has the role of the centralized endpoint.

    The access-node provides the full API to the Insite pipeline which is documented below.
    Currently the [NEST simulator](https://www.nest-simulator.org/) is supported by the in-situ-pipeline.

    To use the in-situ-pipeline the user has to activate the in-situ plugin for the neuronal simulator and deploy Insite's access node.
    There are two ways to use the Insite pipeline, it can be run natively on the hostsystem or alternatively be executed via docker containers.

    # Installation via docker
    To provide an easy to use environment the in-situ-pipeline can be deployed by using docker.
    To be able to use the in-situ-pipeline please make sure that the [docker engine](https://www.docker.com) and [docker compose](https://docs.docker.com/compose/) are installed.

    Two docker image are provided for the in-situ-pipeline.
    The first image contains the NEST simulator with the in-situ plugin installed.
    The second image contains the in-situ-pipeline's access-node. <br><br>
    The docker images can be used independently and can also be combined with the other part running natively.


    Generally, there are two different approaches to use the in-situ pipeline with docker:

    1. [Using docker-hub](#Using-docker-hub)

    2. [Building from GIT](#Building-from-GIT)
    ___
    ## Using docker-hub
    The easiest way to set up the in-situ-pipeline is by using the images from docker-hub.
    The images can simply be pulled from docker-hub and can be used as is.
    The following docker-compose file can be used:
    ```yml
    version: '3'

    services:
      access-node:
        image: rwthvr/insite-access-node
        ports:
          - "8080:8080"
        depends_on:
          - "insite-nest-module"
        command: ["http://insite-nest-module:9000", "http://insite-nest-module:9001"]

      insite-nest-module:
        image: rwthvr/insite-nest-module
        environment:
          - MPI_RANKS=2
        ports:
          - "8000-8099:9000-9099"
        volumes:
          - ./scripts:/scripts/
    ```
    Rename the file to `docker-compose.yml` and use the command `docker-compose up` to deploy the in-situ pipeline. Afterwards, you can [verify the installation](#Verify-Installation) or take a look at [configuring the in-situ pipeline](#Configure-the-in-situ-pipeline).

    <br>
    In case that you want to use the latest develop branch instead of the stable master branch, replace

    ```yml
    access-node:
        image: rwthvr/insite-access-node
        ...

    insite-nest-module:
        image: rwthvr/insite-nest-module
        ...

    ```
    with
    ```yml
    access-node:
        image: rwthvr/insite-access-node:develop
        ...

    insite-nest-module:
        image: rwthvr/insite-nest-module:develop
        ...

    ```
    ## Building from GIT
    1. Clone this repository (`git clone https://github.com/VRGroupRWTH/insite.git`).
    2. Build the containers by using the command `docker-compose build` in the root directory of the repository. On the first run, this can take quite some time as NEST and the NEST plugin must be built. Subsequent runs will usually run much faster as docker caches intermediate builds.

    ## Verify Installation
    1. Start the the test simulation by using the command `docker-compose up` in the root directory of the repository. To make sure the latest changes are included it is advised to use `docker-compose up --build` to avoid errors by out-of-date containers.
    2. You should now be able to query `http://localhost:8080/version` which should give an output similar to this:
      ```json
      {
          "api": "1.0",
          "insite": "1.0"
      }
      ```
      Where `insite` specifies the version of the pipeline and `api` the available endpoint versions for the REST API.
    3. You can query simulation specific queries using the `https://localhost:8080/nest/*` endpoints. E.g., `https://localhost:8080/nest/nodes` to get all nest nodes. The complete API can be found below.

    ## Configuration

    ### Pipeline Ports
    If you want to expose the REST API on a different port change the following line in your docker-compose file:
    ```yml
    access-node:
        ...
        ports:
          - "XXXX:8080"
        ...
    ```
    where `XXXX` is your new port number, afterwards the REST API will be reachable via `IP:XXXX`, e.g. `http://localhost:XXXX`.

    If you want to change the exposed ports of the simulations API change the following line in the docker-compose file:
    ```yml
    insite-nest-module:
        ...
        ports:
          - "XXXX-YYYY:9000-9099"
        ...
    ```
    Please note that the port range specified on the left must have the same size as the port range specified on the right side. The number of ports which are used will depend on the number of MPI ranks and therefore number of simulation nodes you use. (See [Number of simulation nodes](#Number-of-simulation-nodes))

    ### Simulation Script

    The in-situ-pipeline will come with an example simulation. However, you can also use your own NEST simulation script.
    You can place custom scripts in the `script` folder and all `.py` will be picked up automically.
    If you have more than one python script in the `script` folder you can specify which script will be used by settings the environment variable `SCRIPT_NAME` by adding the appropriate env variable to the docker-compose file, e.g.:
    ```yml
    insite-nest-module:
        image: rwthvr/insite-nest-module:develop
        environment:
          - SCRIPT_NAME=brunel.py
        ...
    ```
    You can pass additional arguments to your script by setting the environment var `SCRIPT_ARGS`. Individual arguments must be seperated by a comma, e.g.:
    ```yml
    insite-nest-module:
        image: rwthvr/insite-nest-module:develop
        environment:
          - SCRIPT_NAME=brunel.py
          - SCRIPT_ARGS=var1;var2;var3
        ...
    ```

    You can also specify a different script folder by changing the following line in the docker-compose file:
    ```yml
    volume:
          - XXX:/scripts/
    ```
    where `XXX` is the path to the folder.

    ### Number of simulation nodes

    The number of simulation nodes can be adjusted by settings the environment variable `MPI_RANKS`.(Default=1) <br>
    E.g., if the NEST simulation should run with 3 simulation nodes:
    ```yml
    insite-nest-module:
        image: rwthvr/insite-nest-module:develop
        environment:
          - MPI_RANKS=3
        ...


    ```
    # Installation without docker
    The Insite pipeline uses a cmake based built system for the NEST module part and uses Python 3 for the access-node.
    ## Access Node
    The access node is a python connexion server. Therefore, python has to be installed and additionally the requirements that are given in the `access-node/requirements.txt`.
    Thus, the dependencies can be installed from the access-node folder in case of `pip` with the following command: `pip install -r requirements.txt`
    Afterwards the server can be started by running `python3 -m access_node`. The IP addresses of the simulation nodes must be passed as arguments to the access node.
    In the default configuration the simulations node are reachable via `IP-address:90XX` where `XX` is the MPI rank of the simulation node.

    ## NEST module
    The NEST module can be build via cmake and has cpprestsdk and nest (https://github.com/microsoft/cpprestsdk) as a dependency.

    After cpprestsdk is build and/or installed you can build the NEST module with the following commands:
    ```
    cmake -Dwith-nest=/path-to-nest/bin/nest-config -DCMAKE_BUILD_TYPE=Release /path/to/nest-module-src
    make
    make install
    ```

    ## Verify Installation
    1. Start the access-node via `python3 -m access_node`. Afterwards start the nest simulation with the insite module enabled.
    2. You should now be able to query `http://localhost:8080/version` which should give an output similar to this:
      ```json
      {
          "api": "1.0",
          "insite": "1.0"
      }
      ```
      Where `insite` specifies the version of the pipeline and `api` the available endpoint versions for the REST API.
    3. You can query simulation specific queries using the `https://localhost:8080/nest/*` endpoints. E.g., `https://localhost:8080/nest/nodes` to get all nest nodes. The complete API is available [here](docs/api/README.md).


    # Integration into NEST simulation
    The NEST module for the insite pipeline is designed as a recording backend.

    First the insite module has to be loaded inside of the simulation script.
    Assuming that the NEST simulator is declared as `nest`, this can be done by adding the following line to your simulation script:
    ```python
    nest.Install("insitemodule")
    ```

    To be able to record simulator data, the nodes that should be recorded must be connected to a spike recorder.
    Afterwards, the recording backend of the spike recorder has to be set to record the insite recording backend.
    ```python
    nest.SetStatus(spike_detector, [{"record_to":"insite"}])
    ```
  title: In-Situ Pipeline REST API
  version: 1.1.0
servers:
- url: /v1

x-tagGroups:
  - name: NEST API
    tags:
      - Nest
  - name: General API
    tags:
      - General
paths:
  /nest/kernelStatus/:
    get:
      operationId: nest_get_kernel_status
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NestKernelStatus'
                type: array
          description: Operation successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.

      description: Retrieves the current status of the NEST kernel.
      summary: Get NEST Kernel Status
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /nest/multimeters/:
    get:
      operationId: nest_get_multimeters
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MultimeterInfo'
                type: array
          description: Operation successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Get Multimeters
      description: Retrieves a list with information about all available multimeters and their properties. Additionally, the ids of the nodes that are connected to the multimeter are returned.
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /nest/multimeters/{multimeterId}/:
    get:
      operationId: nest_get_multimeter_by_id
      parameters:
      - description: The identifier of the multimeter.
        explode: false
        in: path
        name: multimeterId
        required: true
        schema:
          format: uint64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultimeterInfo'
          description: Operation successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to invalid request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Get Multimeter Properties
      description: Retrieves information about a specific multimeter that and its properties.
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /nest/multimeters/{multimeterId}/attributes/{attributeName}/:
    get:
      operationId: nest_get_multimeter_measurements
      parameters:
      - description: The multimeter to query
        explode: false
        in: path
        name: multimeterId
        required: true
        schema:
          format: uint64
          type: integer
        style: simple
      - description: The attribute to query (e.g., 'V_m' for the membrane potential)
        explode: false
        in: path
        name: attributeName
        required: true
        schema:
          type: string
        style: simple
      - description: The start time (including) to be queried.
        explode: true
        in: query
        name: fromTime
        required: false
        schema:
          format: double
          type: number
        style: form
      - description: The end time (excluding) to be queried.
        explode: true
        in: query
        name: toTime
        required: false
        schema:
          format: double
          type: number
        style: form
      - description: A list of node IDs queried for attribute data.
        explode: false
        in: query
        name: nodeIds
        required: false
        schema:
          items:
            format: uint64
            type: integer
          type: array
        style: form
      - description: The offset into the result.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: uint64
          type: integer
        style: form
      - description: The maximum number of entries to be returned.
        explode: true
        in: query
        name: top
        required: false
        schema:
          format: uint64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultimeterMeasurement'
          description: Operation successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to invalid request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Retrieves the measurements for a multimeter, attribute and node IDs
        (optional).
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /nest/nodeCollections/:
    get:
      operationId: nest_get_node_collections
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NestNodeCollectionProperties'
                type: array
          description: Operation successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Get Node Collections
      description: Retrieves an list of all node collections. Returned are the node collection IDs, which nodes are part of the collection and which model is used by the collection.
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /nest/nodeCollections/{nodeCollectionId}/nodes/:
    get:
      operationId: nest_get_nodes_by_node_collection
      parameters:
      - description: The identifier of the node collection
        explode: false
        in: path
        name: nodeCollectionId
        required: true
        schema:
          format: uint64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NestNodeProperties'
                type: array
          description: Operation successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to invalid request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      description: Retrieves the list of all nodes within the specified node collection.
      summary: Get Nodes In Node Collection
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /nest/nodeCollections/{nodeCollectionId}/nodes/ids/:
    get:
      operationId: nest_get_node_ids_by_node_collection
      parameters:
      - description: The identifier of the node collection
        explode: false
        in: path
        name: nodeCollectionId
        required: true
        schema:
          format: uint64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - 1
                - 2
                items:
                  format: uint64
                  type: integer
                type: array
          description: Operation successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to invalid request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      description: Retrieves the list of all node ids within the node collection.
      summary: Get Node Ids In Node Collection
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /nest/nodeCollections/{nodeCollectionId}/spikes/:
    get:
      operationId: nest_get_spikes_by_node_collection
      parameters:
      - description: The identifier of the node collection.
        explode: false
        in: path
        name: nodeCollectionId
        required: true
        schema:
          format: uint64
          type: integer
        style: simple
      - description: The start time (including) to be queried.
        explode: true
        in: query
        name: fromTime
        required: false
        schema:
          format: double
          type: number
        style: form
      - description: The end time (excluding) to be queried.
        explode: true
        in: query
        name: toTime
        required: false
        schema:
          format: double
          type: number
        style: form
      - description: The offset into the result.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: uint64
          type: integer
        style: form
      - description: The maximum numbers of entries to be returned.
        explode: true
        in: query
        name: top
        required: false
        schema:
          format: uint64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spikes'
          description: Operation successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to invalid request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Get Spikes By Node Collection ID
      description: Retrieves the spikes for the given simulation steps (optional) and node collection. This request merges the spikes recorded by all spike detectors and removes duplicates.
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /nest/nodes/:
    get:
      operationId: nest_get_nodes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NestNodeProperties'
                type: array
          description: Operation successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Get All Nodes
      description: Retrieves all nodes that are part of the simulation.
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /nest/nodes/ids/:
    get:
      operationId: nest_get_node_ids
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - 1
                - 2
                - 3
                - 4
                items:
                  format: uint64
                  type: integer
                type: array
          description: Operation successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed.

      description: Retrieves a list with the IDs of all node that are part of the simulation.
      summary: Get All Node Ids
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /nest/nodes/{nodeId}/:
    get:
      operationId: nest_get_node_by_id
      parameters:
      - description: The ID of the queried node.
        explode: false
        in: path
        name: nodeId
        required: true
        schema:
          format: uint64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NestNodeProperties'
          description: Operation successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to invalid request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Get Node Properties By Node ID
      description: Retrieves the properties of the specified node.
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /nest/simulationTimeInfo/:
    get:
      operationId: nest_get_simulation_time_info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulationTimeInfo'
          description: Operation successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed.
      summary: Get Simulation Time Info
      description: Retrieves simulation time information (stepSize, begin, current, end).
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller

  /nest/spikerecorders/:
    get:
      operationId: nest_get_spikerecorders
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SpikedetectorInfo'
                type: array
          description: Operation successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Get Spike Recorders
      description: Queries all spike recorders that are available via the pipeline.
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller

  /nest/spikedetectors/:
    get:
      deprecated: true
      operationId: nest_get_spikedetectors
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SpikedetectorInfo'
                type: array
          description: Operation successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Get Spike Detectors
      description: "DEPRECATED: USE /nest/spikerecorders INSTEAD.<br> Queries all spike detectors that are available via the pipeline."
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller

  /nest/spikerecorders/{spikerecorderId}/spikes/:
    get:
      operationId: nest_get_spikes_by_spikerecorder
      parameters:
      - description: The ID of the spike detector to query.
        explode: false
        in: path
        name: spikerecorderId
        required: true
        schema:
          format: uint64
          type: integer
        style: simple
      - description: The start time in milliseconds (including) to be queried.
        explode: true
        in: query
        name: fromTime
        required: false
        schema:
          format: double
          type: number
        style: form
      - description: The end time in milliseconds (excluding) to be queried.
        explode: true
        in: query
        name: toTime
        required: false
        schema:
          format: double
          type: number
        style: form
      - description: A list of node IDs queried for spike data.
        explode: false
        in: query
        name: nodeIds
        required: false
        schema:
          items:
            format: uint64
            type: integer
          type: array
        style: form
      - description: The offset into the result.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: uint64
          type: integer
        style: form
      - description: The maximum number of entries to be returned.
        explode: true
        in: query
        name: top
        required: false
        schema:
          format: uint64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spikes'
          description: Operation successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to invalid request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Get Spikes By Spike Recorder Id
      description: Retrieves the spikes for the given time range (optional) and node IDs
        (optional) from one spike recorder. If no time range or node list is specified,
        it will return the spikes for whole time or all nodes respectively.
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller


  /nest/spikedetectors/{spikedetectorId}/spikes/:
    get:
      deprecated: true
      operationId: nest_get_spikes_by_spikedetector
      parameters:
      - description: The ID of the spike detector to query.
        explode: false
        in: path
        name: spikedetectorId
        required: true
        schema:
          format: uint64
          type: integer
        style: simple
      - description: The start time in milliseconds (including) to be queried.
        explode: true
        in: query
        name: fromTime
        required: false
        schema:
          format: double
          type: number
        style: form
      - description: The end time in milliseconds (excluding) to be queried.
        explode: true
        in: query
        name: toTime
        required: false
        schema:
          format: double
          type: number
        style: form
      - description: A list of node IDs queried for spike data.
        explode: false
        in: query
        name: nodeIds
        required: false
        schema:
          items:
            format: uint64
            type: integer
          type: array
        style: form
      - description: The offset into the result.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: uint64
          type: integer
        style: form
      - description: The maximum number of entries to be returned.
        explode: true
        in: query
        name: top
        required: false
        schema:
          format: uint64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spikes'
          description: Operation successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to invalid request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Get Spikes By Spikedetector Id
      description: Retrieves the spikes for the given time range (optional) and node IDs
        (optional) from one spike detector. If no time range or node list is specified,
        it will return the spikes for whole time or all nodes respectively.
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller

  /nest/spikes/:
    get:
      operationId: nest_get_spikes
      parameters:
      - description: The start time in milliseconds (including) to be queried.
        explode: true
        in: query
        name: fromTime
        required: false
        schema:
          format: double
          type: number
        style: form
      - description: The end time in milliseconds (excluding) to be queried.
        explode: true
        in: query
        name: toTime
        required: false
        schema:
          format: double
          type: number
        style: form
      - description: A list of node IDs queried for spike data.
        explode: false
        in: query
        name: nodeIds
        required: false
        schema:
          items:
            format: uint64
            type: integer
          type: array
        style: form
      - description: The offset into the result.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: uint64
          type: integer
        style: form
      - description: The maximum number of entries to be returned.
        explode: true
        in: query
        name: top
        required: false
        schema:
          format: uint64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spikes'
          description: Operation successful.
        "400":
          content:
             text/plain:
               schema:
                 type: string
          description: Operation failed due to invalid request.
        "500":
          content:
            text/plain:
              schema:
                type: string
          description: Operation failed due to server error.
      summary: Get All Spikes
      description: Retrieves the spikes for the given time range (optional) and node IDs
        (optional). If no time range or node list is specified, it will return the
        spikes for whole time or all nodes respectively. This request merges the spikes
        recorded by all spike detectors and removes duplicates.
      tags:
      - Nest
      x-swagger-router-controller: access_node.controllers.nest_controller
      x-openapi-router-controller: access_node.controllers.nest_controller
  /version/:
    get:
      operationId: get_version
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
          description: Operation successful.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation failed due to server error.
      summary: Get Insite and API version
      description: Returns the deployed insite and API versions.
      tags:
        - General
      x-swagger-router-controller: access_node.controllers.version_controller
      x-openapi-router-controller: access_node.controllers.version_controller
components:
  schemas:
    Version:
      example:
        api:
          v1: "1.3"
          v2: "2.1"
          v3: "3.5"
        insite: "4.6"
      properties:
        api:
          type: string
        insite:
          type: string
      required:
      - api
      - insite
      type: object
    ErrorResponse:
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
      - error
      type: object
    Error:
      properties:
        code:
          description: 'One of the error codes defined here: [...]'
          type: string
        message:
          description: A human-readable representation of the error.
          type: string
        innererror:
          $ref: '#/components/schemas/InnerError'
      required:
      - code
      - message
      type: object
    InnerError:
      properties:
        code:
          description: 'One of the error codes defined here: [...]'
          type: string
        innererror:
          $ref: '#/components/schemas/InnerError'
      required:
      - code
      type: object
    Spikes:
      example:
        simulationTimes:
        - 0.8
        - 0.9
        nodeIds:
        - 1
        - 2
        lastFrame:
          False
      properties:
        simulationTimes:
          description: Array of times where a spike occured. This array is always sorted.
          items:
            format: double
            type: number
          type: array
        nodeIds:
          description: Array of nodeIds that spiked. This array is sorted according to the spike times.
          items:
            format: uint64
            type: integer
          type: array
        lastFrame:
          description: Indicates if this frame includes the last spike of the finished simulation.
          type: bool
      type: object
    MultimeterMeasurement:
      example:
        simulationTimes:
        - 0.1
        - 0.2
        nodeIds:
        - 1
        - 2
        - 3
        values:
        - 0.123
        - 0.123
        - 0.123
        - 0.123
        - 0.123
        - 0.123
      properties:
        simulationTimes:
          description: This array is always sorted.
          items:
            format: double
            type: number
          type: array
        nodeIds:
          items:
            format: uint64
            type: integer
          type: array
        values:
          description: This array contains the measured values for each node ID and
            time to get the value for node ID n at time t you have to use the index
            n * length(simulationTimes) + t
          items:
            type: number
          type: array
      type: object
    NestNodeProperties:
      example:
        nodeId: 1
        nodeCollectionId: 0
        simulationNodeId: 0
        position:
        - 0.1
        - 0.2
        model: iaf_psc_delta
        status:
          C_m: 1
          Ca: 0
          E_L: 0
          I_e: 0
          V_m: 0
          V_min: -1.7976931348623157e+308
          V_reset: 0
          V_th: 20
          archiver_length: 0
          beta_Ca: 0.001
      properties:
        nodeId:
          format: uint64
          type: integer
        nodeCollectionId:
          format: uint64
          type: integer
        model:
          type: string
        status:
          type: object
        position:
          items:
            type: number
          type: array
      type: object
    NestNodeCollectionProperties:
      example:
        nodeCollectionId: 0
        nodes:
          firstId: 1
          lastId: 100
          count: 100
        model:
          name: iaf_psc_delta
          status:
            C_m: 1,
            Ca: 0,
            E_L: 0,
            I_e: 0,
            V_m: 0,
            V_min: -1.7976931348623157e+308,
            V_reset: 0,
            V_th: 20,
      properties:
        nodeCollectionId:
          format: uint64
          type: integer
        nodes:
          $ref: '#/components/schemas/NestNodeCollectionNodes'
        model:
          $ref: '#/components/schemas/NestNodeModel'
      type: object
    NestNodeModel:
      example:
        name: iaf_psc_delta
        status:
          C_m: 1,
          Ca: 0,
          E_L: 0,
          I_e: 0,
          V_m: 0,
          V_min: -1.7976931348623157e+308,
          V_reset: 0,
          V_th: 20,
      properties:
        name:
          type: string
        status:
          type: object
      type: object
    NestNodeCollectionNodes:
      example:
        firstId: 1
        lastId: 100
        count: 100
      properties:
        firstId:
          format: uint64
          type: integer
        lastId:
          format: uint64
          type: integer
        count:
          format: uint64
          type: integer
    SimulationTimeInfo:
      example:
        stepSize: 0.1
        current: 2.1
        begin: 0.1
        end: 4.5
      properties:
        stepSize:
          format: double
          type: number
        begin:
          format: double
          type: number
        end:
          format: double
          type: number
        current:
          format: double
          type: number
      type: object
    MultimeterInfo:
      example:
        multimeterId: 10
        attributes:
        - V_m
        nodeIds:
        - 1
        - 3
        - 5
      properties:
        multimeterId:
          format: uint64
          type: integer
        attributes:
          items:
            type: string
          type: array
        nodeIds:
          items:
            format: uint64
            type: integer
          type: array
      type: object
    SpikedetectorInfo:
      example:
        spikedetectorId: 0
        nodeIds:
        - 1
        - 3
        - 5
      properties:
        spikedetectorId:
          format: uint64
          type: integer
        nodeIds:
          description: These are the nodes connected to the spike detector.
          items:
            format: uint64
            type: integer
          type: array
      type: object
    NestKernelStatus:
      type: object
      example:
        "T_max": 1152921504606846.8
        "T_min": -1152921504606846.8
        "adaptive_spike_buffers": true
        "adaptive_target_buffers": true
        "buffer_size_secondary_events": 0
        "buffer_size_spike_data": 42
        "buffer_size_target_data": 125
        "data_path": ""
        "data_prefix": ""
        "dict_miss_is_error": true
        "grng_seed": 0
        "growth_factor_buffer_spike_data": 1.5
        "growth_factor_buffer_target_data": 1.5
        "keep_source_table": true
        "local_num_threads": 1
        "local_spike_counter": 745
        "max_buffer_size_spike_data": 8388608
        "max_buffer_size_target_data": 16777216
        "max_delay": 1.5
        "max_num_syn_models": 512
        "min_delay": 1.5
        "ms_per_tic": 0.001
        "network_size": 128
        "num_connections": 1750
        "num_processes": 1
        "off_grid_spiking": false
        "overwrite_files": true
        "print_time": false
        "recording_backends": {
          "ascii": {},
          "insite": {},
          "memory": {},
          "screen": {}
        }
        "resolution": 0.1
        "rng_seeds": [
          1
        ]
        "sort_connections_by_source": true
        "structural_plasticity_synapses": {}
        "structural_plasticity_update_interval": 10000
        "tics_per_ms": 1000
        "tics_per_step": 100
        "time": 100
        "time_collocate": 0
        "time_communicate": 0
        "to_do": 0
        "total_num_virtual_procs": 1
        "use_wfr": true
        "wfr_comm_interval": 1
        "wfr_interpolation_order": 3
        "wfr_max_iterations": 15
        "wfr_tol": 0.0001
