// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_TEST_FOO_H_
#define FLATBUFFERS_GENERATED_SCHEMA_TEST_FOO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

namespace Test {
namespace Foo {

struct Spikes;

struct SpikyTable;
struct SpikyTableBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Spikes FLATBUFFERS_FINAL_CLASS {
 private:
  double spike_time_;
  uint64_t node_id_;

 public:
  Spikes()
      : spike_time_(0),
        node_id_(0) {
  }
  Spikes(double _spike_time, uint64_t _node_id)
      : spike_time_(flatbuffers::EndianScalar(_spike_time)),
        node_id_(flatbuffers::EndianScalar(_node_id)) {
  }
  double spike_time() const {
    return flatbuffers::EndianScalar(spike_time_);
  }
  uint64_t node_id() const {
    return flatbuffers::EndianScalar(node_id_);
  }
};
FLATBUFFERS_STRUCT_END(Spikes, 16);

struct SpikyTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SpikyTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SPIKES = 4,
    VT_LAST_FRAME = 6
  };
  const flatbuffers::Vector<const Test::Foo::Spikes *> *spikes() const {
    return GetPointer<const flatbuffers::Vector<const Test::Foo::Spikes *> *>(VT_SPIKES);
  }
  bool last_frame() const {
    return GetField<uint8_t>(VT_LAST_FRAME, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SPIKES) &&
           verifier.VerifyVector(spikes()) &&
           VerifyField<uint8_t>(verifier, VT_LAST_FRAME, 1) &&
           verifier.EndTable();
  }
};

struct SpikyTableBuilder {
  typedef SpikyTable Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_spikes(flatbuffers::Offset<flatbuffers::Vector<const Test::Foo::Spikes *>> spikes) {
    fbb_.AddOffset(SpikyTable::VT_SPIKES, spikes);
  }
  void add_last_frame(bool last_frame) {
    fbb_.AddElement<uint8_t>(SpikyTable::VT_LAST_FRAME, static_cast<uint8_t>(last_frame), 0);
  }
  explicit SpikyTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SpikyTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SpikyTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<SpikyTable> CreateSpikyTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const Test::Foo::Spikes *>> spikes = 0,
    bool last_frame = false) {
  SpikyTableBuilder builder_(_fbb);
  builder_.add_spikes(spikes);
  builder_.add_last_frame(last_frame);
  return builder_.Finish();
}

inline flatbuffers::Offset<SpikyTable> CreateSpikyTableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<Test::Foo::Spikes> *spikes = nullptr,
    bool last_frame = false) {
  auto spikes__ = spikes ? _fbb.CreateVectorOfStructs<Test::Foo::Spikes>(*spikes) : 0;
  return Test::Foo::CreateSpikyTable(
      _fbb,
      spikes__,
      last_frame);
}

inline const Test::Foo::SpikyTable *GetSpikyTable(const void *buf) {
  return flatbuffers::GetRoot<Test::Foo::SpikyTable>(buf);
}

inline const Test::Foo::SpikyTable *GetSizePrefixedSpikyTable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Test::Foo::SpikyTable>(buf);
}

inline bool VerifySpikyTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Test::Foo::SpikyTable>(nullptr);
}

inline bool VerifySizePrefixedSpikyTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Test::Foo::SpikyTable>(nullptr);
}

inline void FinishSpikyTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Test::Foo::SpikyTable> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSpikyTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Test::Foo::SpikyTable> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Foo
}  // namespace Test

#endif  // FLATBUFFERS_GENERATED_SCHEMA_TEST_FOO_H_
